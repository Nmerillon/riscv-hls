-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity has_byte is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_uart_AWVALID : OUT STD_LOGIC;
    m_axi_uart_AWREADY : IN STD_LOGIC;
    m_axi_uart_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_uart_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_uart_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_uart_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_uart_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_uart_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_uart_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_uart_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_uart_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_uart_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_uart_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_uart_WVALID : OUT STD_LOGIC;
    m_axi_uart_WREADY : IN STD_LOGIC;
    m_axi_uart_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_uart_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_uart_WLAST : OUT STD_LOGIC;
    m_axi_uart_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_uart_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_uart_ARVALID : OUT STD_LOGIC;
    m_axi_uart_ARREADY : IN STD_LOGIC;
    m_axi_uart_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_uart_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_uart_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_uart_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_uart_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_uart_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_uart_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_uart_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_uart_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_uart_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_uart_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_uart_RVALID : IN STD_LOGIC;
    m_axi_uart_RREADY : OUT STD_LOGIC;
    m_axi_uart_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_uart_RLAST : IN STD_LOGIC;
    m_axi_uart_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_uart_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_uart_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_uart_BVALID : IN STD_LOGIC;
    m_axi_uart_BREADY : OUT STD_LOGIC;
    m_axi_uart_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_uart_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_uart_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    uart_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of has_byte is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv31_2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal uart_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal uart_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln66_fu_52_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln66_reg_72 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln66_1_fu_58_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_fu_48_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                add_ln66_reg_72 <= add_ln66_fu_52_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_uart_ARREADY, m_axi_uart_RVALID, ap_CS_fsm_state2, ap_CS_fsm_state9)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((m_axi_uart_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((m_axi_uart_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln66_fu_52_p2 <= std_logic_vector(unsigned(ap_const_lv31_2) + unsigned(zext_ln66_fu_48_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_uart_RVALID, ap_CS_fsm_state9)
    begin
        if ((((m_axi_uart_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_uart_RVALID, ap_CS_fsm_state9)
    begin
        if (((m_axi_uart_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= m_axi_uart_RDATA(1 - 1 downto 0);
    m_axi_uart_ARADDR <= zext_ln66_1_fu_58_p1(32 - 1 downto 0);
    m_axi_uart_ARBURST <= ap_const_lv2_0;
    m_axi_uart_ARCACHE <= ap_const_lv4_0;
    m_axi_uart_ARID <= ap_const_lv1_0;
    m_axi_uart_ARLEN <= ap_const_lv32_1;
    m_axi_uart_ARLOCK <= ap_const_lv2_0;
    m_axi_uart_ARPROT <= ap_const_lv3_0;
    m_axi_uart_ARQOS <= ap_const_lv4_0;
    m_axi_uart_ARREGION <= ap_const_lv4_0;
    m_axi_uart_ARSIZE <= ap_const_lv3_0;
    m_axi_uart_ARUSER <= ap_const_lv1_0;

    m_axi_uart_ARVALID_assign_proc : process(m_axi_uart_ARREADY, ap_CS_fsm_state2)
    begin
        if (((m_axi_uart_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_uart_ARVALID <= ap_const_logic_1;
        else 
            m_axi_uart_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_uart_AWADDR <= ap_const_lv32_0;
    m_axi_uart_AWBURST <= ap_const_lv2_0;
    m_axi_uart_AWCACHE <= ap_const_lv4_0;
    m_axi_uart_AWID <= ap_const_lv1_0;
    m_axi_uart_AWLEN <= ap_const_lv32_0;
    m_axi_uart_AWLOCK <= ap_const_lv2_0;
    m_axi_uart_AWPROT <= ap_const_lv3_0;
    m_axi_uart_AWQOS <= ap_const_lv4_0;
    m_axi_uart_AWREGION <= ap_const_lv4_0;
    m_axi_uart_AWSIZE <= ap_const_lv3_0;
    m_axi_uart_AWUSER <= ap_const_lv1_0;
    m_axi_uart_AWVALID <= ap_const_logic_0;
    m_axi_uart_BREADY <= ap_const_logic_0;

    m_axi_uart_RREADY_assign_proc : process(m_axi_uart_RVALID, ap_CS_fsm_state9)
    begin
        if (((m_axi_uart_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_uart_RREADY <= ap_const_logic_1;
        else 
            m_axi_uart_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_uart_WDATA <= ap_const_lv32_0;
    m_axi_uart_WID <= ap_const_lv1_0;
    m_axi_uart_WLAST <= ap_const_logic_0;
    m_axi_uart_WSTRB <= ap_const_lv4_0;
    m_axi_uart_WUSER <= ap_const_lv1_0;
    m_axi_uart_WVALID <= ap_const_logic_0;

    uart_blk_n_AR_assign_proc : process(m_axi_uart_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            uart_blk_n_AR <= m_axi_uart_ARREADY;
        else 
            uart_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    uart_blk_n_R_assign_proc : process(m_axi_uart_RVALID, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            uart_blk_n_R <= m_axi_uart_RVALID;
        else 
            uart_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    zext_ln66_1_fu_58_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln66_reg_72),64));
    zext_ln66_fu_48_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(uart_offset),31));
end behav;
