-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity write_byte is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_uart_AWVALID : OUT STD_LOGIC;
    m_axi_uart_AWREADY : IN STD_LOGIC;
    m_axi_uart_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_uart_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_uart_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_uart_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_uart_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_uart_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_uart_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_uart_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_uart_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_uart_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_uart_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_uart_WVALID : OUT STD_LOGIC;
    m_axi_uart_WREADY : IN STD_LOGIC;
    m_axi_uart_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_uart_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_uart_WLAST : OUT STD_LOGIC;
    m_axi_uart_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_uart_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_uart_ARVALID : OUT STD_LOGIC;
    m_axi_uart_ARREADY : IN STD_LOGIC;
    m_axi_uart_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_uart_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_uart_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_uart_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_uart_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_uart_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_uart_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_uart_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_uart_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_uart_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_uart_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_uart_RVALID : IN STD_LOGIC;
    m_axi_uart_RREADY : OUT STD_LOGIC;
    m_axi_uart_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_uart_RLAST : IN STD_LOGIC;
    m_axi_uart_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_uart_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_uart_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_uart_BVALID : IN STD_LOGIC;
    m_axi_uart_BREADY : OUT STD_LOGIC;
    m_axi_uart_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_uart_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_uart_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    uart_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    data : IN STD_LOGIC_VECTOR (6 downto 0) );
end;


architecture behav of write_byte is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv31_2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal uart_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln109_fu_127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal uart_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal uart_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal uart_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal uart_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal zext_ln110_fu_107_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln110_reg_171 : STD_LOGIC_VECTOR (30 downto 0);
    signal uart_addr_reg_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_fu_133_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal k_reg_185 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal add_ln113_fu_147_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln113_reg_193 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_fu_139_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_0_reg_96 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln110_1_fu_117_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln113_1_fu_152_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln110_fu_111_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    k_0_reg_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_uart_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                k_0_reg_96 <= k_reg_185;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_0_reg_96 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_uart_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_fu_139_p3 = ap_const_lv1_0))) then
                add_ln113_reg_193 <= add_ln113_fu_147_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then
                k_reg_185 <= k_fu_133_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    uart_addr_reg_176(30 downto 0) <= zext_ln110_1_fu_117_p1(32 - 1 downto 0)(30 downto 0);
                    zext_ln110_reg_171(29 downto 0) <= zext_ln110_fu_107_p1(29 downto 0);
            end if;
        end if;
    end process;
    zext_ln110_reg_171(30) <= '0';
    uart_addr_reg_176(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_uart_AWREADY, m_axi_uart_WREADY, m_axi_uart_ARREADY, m_axi_uart_RVALID, m_axi_uart_BVALID, ap_CS_fsm_state2, icmp_ln109_fu_127_p2, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state24, ap_block_state2_io, tmp_fu_139_p3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io) and (icmp_ln109_fu_127_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io) and (icmp_ln109_fu_127_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((m_axi_uart_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((m_axi_uart_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((m_axi_uart_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_fu_139_p3 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                elsif (((m_axi_uart_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_fu_139_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((m_axi_uart_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((m_axi_uart_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((m_axi_uart_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln110_fu_111_p2 <= std_logic_vector(unsigned(zext_ln110_fu_107_p1) + unsigned(ap_const_lv31_2));
    add_ln113_fu_147_p2 <= std_logic_vector(unsigned(zext_ln110_reg_171) + unsigned(ap_const_lv31_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state2_io_assign_proc : process(m_axi_uart_ARREADY, icmp_ln109_fu_127_p2)
    begin
                ap_block_state2_io <= ((m_axi_uart_ARREADY = ap_const_logic_0) and (icmp_ln109_fu_127_p2 = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_uart_BVALID, ap_CS_fsm_state24)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((m_axi_uart_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_uart_BVALID, ap_CS_fsm_state24)
    begin
        if (((m_axi_uart_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln109_fu_127_p2 <= "1" when (k_0_reg_96 = ap_const_lv13_1000) else "0";
    k_fu_133_p2 <= std_logic_vector(unsigned(k_0_reg_96) + unsigned(ap_const_lv13_1));
    m_axi_uart_ARADDR <= uart_addr_reg_176;
    m_axi_uart_ARBURST <= ap_const_lv2_0;
    m_axi_uart_ARCACHE <= ap_const_lv4_0;
    m_axi_uart_ARID <= ap_const_lv1_0;
    m_axi_uart_ARLEN <= ap_const_lv32_1;
    m_axi_uart_ARLOCK <= ap_const_lv2_0;
    m_axi_uart_ARPROT <= ap_const_lv3_0;
    m_axi_uart_ARQOS <= ap_const_lv4_0;
    m_axi_uart_ARREGION <= ap_const_lv4_0;
    m_axi_uart_ARSIZE <= ap_const_lv3_0;
    m_axi_uart_ARUSER <= ap_const_lv1_0;

    m_axi_uart_ARVALID_assign_proc : process(m_axi_uart_ARREADY, ap_CS_fsm_state2, icmp_ln109_fu_127_p2, ap_CS_fsm_state10, ap_block_state2_io)
    begin
        if ((((m_axi_uart_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io) and (icmp_ln109_fu_127_p2 = ap_const_lv1_0)))) then 
            m_axi_uart_ARVALID <= ap_const_logic_1;
        else 
            m_axi_uart_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_uart_AWADDR <= zext_ln113_1_fu_152_p1(32 - 1 downto 0);
    m_axi_uart_AWBURST <= ap_const_lv2_0;
    m_axi_uart_AWCACHE <= ap_const_lv4_0;
    m_axi_uart_AWID <= ap_const_lv1_0;
    m_axi_uart_AWLEN <= ap_const_lv32_1;
    m_axi_uart_AWLOCK <= ap_const_lv2_0;
    m_axi_uart_AWPROT <= ap_const_lv3_0;
    m_axi_uart_AWQOS <= ap_const_lv4_0;
    m_axi_uart_AWREGION <= ap_const_lv4_0;
    m_axi_uart_AWSIZE <= ap_const_lv3_0;
    m_axi_uart_AWUSER <= ap_const_lv1_0;

    m_axi_uart_AWVALID_assign_proc : process(m_axi_uart_AWREADY, ap_CS_fsm_state18)
    begin
        if (((m_axi_uart_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            m_axi_uart_AWVALID <= ap_const_logic_1;
        else 
            m_axi_uart_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_uart_BREADY_assign_proc : process(m_axi_uart_BVALID, ap_CS_fsm_state24)
    begin
        if (((m_axi_uart_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            m_axi_uart_BREADY <= ap_const_logic_1;
        else 
            m_axi_uart_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_uart_RREADY_assign_proc : process(m_axi_uart_RVALID, ap_CS_fsm_state9, ap_CS_fsm_state17)
    begin
        if ((((m_axi_uart_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((m_axi_uart_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            m_axi_uart_RREADY <= ap_const_logic_1;
        else 
            m_axi_uart_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_uart_WDATA <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data),32));
    m_axi_uart_WID <= ap_const_lv1_0;
    m_axi_uart_WLAST <= ap_const_logic_0;
    m_axi_uart_WSTRB <= ap_const_lv4_F;
    m_axi_uart_WUSER <= ap_const_lv1_0;

    m_axi_uart_WVALID_assign_proc : process(m_axi_uart_WREADY, ap_CS_fsm_state19)
    begin
        if (((m_axi_uart_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            m_axi_uart_WVALID <= ap_const_logic_1;
        else 
            m_axi_uart_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_139_p3 <= m_axi_uart_RDATA(1 downto 1);

    uart_blk_n_AR_assign_proc : process(m_axi_uart_ARREADY, ap_CS_fsm_state2, icmp_ln109_fu_127_p2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln109_fu_127_p2 = ap_const_lv1_0)))) then 
            uart_blk_n_AR <= m_axi_uart_ARREADY;
        else 
            uart_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    uart_blk_n_AW_assign_proc : process(m_axi_uart_AWREADY, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            uart_blk_n_AW <= m_axi_uart_AWREADY;
        else 
            uart_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    uart_blk_n_B_assign_proc : process(m_axi_uart_BVALID, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            uart_blk_n_B <= m_axi_uart_BVALID;
        else 
            uart_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    uart_blk_n_R_assign_proc : process(m_axi_uart_RVALID, ap_CS_fsm_state9, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            uart_blk_n_R <= m_axi_uart_RVALID;
        else 
            uart_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    uart_blk_n_W_assign_proc : process(m_axi_uart_WREADY, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            uart_blk_n_W <= m_axi_uart_WREADY;
        else 
            uart_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    zext_ln110_1_fu_117_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln110_fu_111_p2),64));
    zext_ln110_fu_107_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(uart_offset),31));
    zext_ln113_1_fu_152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln113_reg_193),64));
end behav;
