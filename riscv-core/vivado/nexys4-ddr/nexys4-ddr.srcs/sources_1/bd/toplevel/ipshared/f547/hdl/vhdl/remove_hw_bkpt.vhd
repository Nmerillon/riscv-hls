-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity remove_hw_bkpt is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    addr : IN STD_LOGIC_VECTOR (31 downto 0);
    hbkpt_active_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    hbkpt_active_ce0 : OUT STD_LOGIC;
    hbkpt_active_we0 : OUT STD_LOGIC;
    hbkpt_active_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    hbkpt_active_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    hbkpt_target_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    hbkpt_target_ce0 : OUT STD_LOGIC;
    hbkpt_target_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of remove_hw_bkpt is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal k_fu_95_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_reg_130 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln158_fu_101_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln158_reg_136 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln157_fu_89_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal hbkpt_active_load_reg_146 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal k_0_i_reg_67 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln159_fu_106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal offset_reg_78 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln181_fu_117_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln180_fu_111_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    k_0_i_reg_67_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln159_fu_106_p2 = ap_const_lv1_0) or (hbkpt_active_load_reg_146 = ap_const_lv1_0)))) then 
                k_0_i_reg_67 <= k_reg_130;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_0_i_reg_67 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    offset_reg_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln157_fu_89_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                offset_reg_78 <= ap_const_lv6_0;
            elsif (((icmp_ln159_fu_106_p2 = ap_const_lv1_1) and (hbkpt_active_load_reg_146 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                offset_reg_78 <= k_reg_130;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                hbkpt_active_load_reg_146 <= hbkpt_active_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                k_reg_130 <= k_fu_95_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln157_fu_89_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln158_reg_136(5 downto 0) <= zext_ln158_fu_101_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln158_reg_136(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln157_fu_89_p2, hbkpt_active_load_reg_146, ap_CS_fsm_state4, icmp_ln159_fu_106_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln157_fu_89_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln159_fu_106_p2 = ap_const_lv1_0) or (hbkpt_active_load_reg_146 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    hbkpt_active_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln158_fu_101_p1, zext_ln181_fu_117_p1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            hbkpt_active_address0 <= zext_ln181_fu_117_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            hbkpt_active_address0 <= zext_ln158_fu_101_p1(5 - 1 downto 0);
        else 
            hbkpt_active_address0 <= "XXXXX";
        end if; 
    end process;


    hbkpt_active_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            hbkpt_active_ce0 <= ap_const_logic_1;
        else 
            hbkpt_active_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hbkpt_active_d0 <= ap_const_lv1_0;

    hbkpt_active_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln180_fu_111_p2)
    begin
        if (((icmp_ln180_fu_111_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            hbkpt_active_we0 <= ap_const_logic_1;
        else 
            hbkpt_active_we0 <= ap_const_logic_0;
        end if; 
    end process;

    hbkpt_target_address0 <= zext_ln158_reg_136(5 - 1 downto 0);

    hbkpt_target_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            hbkpt_target_ce0 <= ap_const_logic_1;
        else 
            hbkpt_target_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln157_fu_89_p2 <= "1" when (k_0_i_reg_67 = ap_const_lv6_20) else "0";
    icmp_ln159_fu_106_p2 <= "1" when (hbkpt_target_q0 = addr) else "0";
    icmp_ln180_fu_111_p2 <= "1" when (offset_reg_78 = ap_const_lv6_0) else "0";
    k_fu_95_p2 <= std_logic_vector(unsigned(k_0_i_reg_67) + unsigned(ap_const_lv6_1));
    zext_ln158_fu_101_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_i_reg_67),64));
    zext_ln181_fu_117_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset_reg_78),64));
end behav;
