-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity uart_master is
generic (
    C_M_AXI_MEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_MEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_mem_AWVALID : OUT STD_LOGIC;
    m_axi_mem_AWREADY : IN STD_LOGIC;
    m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_AWUSER_WIDTH-1 downto 0);
    m_axi_mem_WVALID : OUT STD_LOGIC;
    m_axi_mem_WREADY : IN STD_LOGIC;
    m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH-1 downto 0);
    m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH/8-1 downto 0);
    m_axi_mem_WLAST : OUT STD_LOGIC;
    m_axi_mem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_WUSER_WIDTH-1 downto 0);
    m_axi_mem_ARVALID : OUT STD_LOGIC;
    m_axi_mem_ARREADY : IN STD_LOGIC;
    m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ARUSER_WIDTH-1 downto 0);
    m_axi_mem_RVALID : IN STD_LOGIC;
    m_axi_mem_RREADY : OUT STD_LOGIC;
    m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH-1 downto 0);
    m_axi_mem_RLAST : IN STD_LOGIC;
    m_axi_mem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_RUSER_WIDTH-1 downto 0);
    m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BVALID : IN STD_LOGIC;
    m_axi_mem_BREADY : OUT STD_LOGIC;
    m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_BUSER_WIDTH-1 downto 0);
    debug : IN STD_LOGIC;
    step : IN STD_LOGIC;
    dbg_pc : OUT STD_LOGIC_VECTOR (31 downto 0);
    dbg_ir : OUT STD_LOGIC_VECTOR (31 downto 0);
    iomap : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of uart_master is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "uart_master,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=45,HLS_SYN_DSP=0,HLS_SYN_FF=2642,HLS_SYN_LUT=9328,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_ABBADEDE : STD_LOGIC_VECTOR (31 downto 0) := "10101011101110101101111011011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_const_lv32_BEEF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001011111011101111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal dbg_pc_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal dbg_pc_1_data_in : STD_LOGIC_VECTOR (31 downto 0);
    signal dbg_pc_1_vld_reg : STD_LOGIC := '0';
    signal dbg_pc_1_vld_in : STD_LOGIC;
    signal dbg_ir_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal dbg_ir_1_data_in : STD_LOGIC_VECTOR (31 downto 0);
    signal dbg_ir_1_vld_reg : STD_LOGIC := '0';
    signal dbg_ir_1_vld_in : STD_LOGIC;
    signal pc : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal cmd_count : STD_LOGIC_VECTOR (31 downto 0) := "10101011000000000000000000000000";
    signal halted : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal mem_AWVALID : STD_LOGIC;
    signal mem_AWREADY : STD_LOGIC;
    signal mem_WVALID : STD_LOGIC;
    signal mem_WREADY : STD_LOGIC;
    signal mem_ARVALID : STD_LOGIC;
    signal mem_ARREADY : STD_LOGIC;
    signal mem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal mem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal mem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal mem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal mem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal mem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_RVALID : STD_LOGIC;
    signal mem_RREADY : STD_LOGIC;
    signal mem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_RLAST : STD_LOGIC;
    signal mem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_BVALID : STD_LOGIC;
    signal mem_BREADY : STD_LOGIC;
    signal mem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal iomap1_reg_212 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal step_read_read_fu_109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_has_byte_fu_149_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_227 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_has_byte_fu_149_ap_ready : STD_LOGIC;
    signal grp_has_byte_fu_149_ap_done : STD_LOGIC;
    signal or_ln383_fu_200_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_debug_comman_fu_116_ap_start : STD_LOGIC;
    signal grp_process_debug_comman_fu_116_ap_done : STD_LOGIC;
    signal grp_process_debug_comman_fu_116_ap_idle : STD_LOGIC;
    signal grp_process_debug_comman_fu_116_ap_ready : STD_LOGIC;
    signal grp_process_debug_comman_fu_116_m_axi_uart_AWVALID : STD_LOGIC;
    signal grp_process_debug_comman_fu_116_m_axi_uart_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_debug_comman_fu_116_m_axi_uart_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_process_debug_comman_fu_116_m_axi_uart_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_debug_comman_fu_116_m_axi_uart_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_process_debug_comman_fu_116_m_axi_uart_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_process_debug_comman_fu_116_m_axi_uart_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_process_debug_comman_fu_116_m_axi_uart_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_debug_comman_fu_116_m_axi_uart_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_process_debug_comman_fu_116_m_axi_uart_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_debug_comman_fu_116_m_axi_uart_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_debug_comman_fu_116_m_axi_uart_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_process_debug_comman_fu_116_m_axi_uart_WVALID : STD_LOGIC;
    signal grp_process_debug_comman_fu_116_m_axi_uart_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_debug_comman_fu_116_m_axi_uart_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_debug_comman_fu_116_m_axi_uart_WLAST : STD_LOGIC;
    signal grp_process_debug_comman_fu_116_m_axi_uart_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_process_debug_comman_fu_116_m_axi_uart_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_process_debug_comman_fu_116_m_axi_uart_ARVALID : STD_LOGIC;
    signal grp_process_debug_comman_fu_116_m_axi_uart_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_debug_comman_fu_116_m_axi_uart_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_process_debug_comman_fu_116_m_axi_uart_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_debug_comman_fu_116_m_axi_uart_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_process_debug_comman_fu_116_m_axi_uart_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_process_debug_comman_fu_116_m_axi_uart_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_process_debug_comman_fu_116_m_axi_uart_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_debug_comman_fu_116_m_axi_uart_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_process_debug_comman_fu_116_m_axi_uart_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_debug_comman_fu_116_m_axi_uart_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_debug_comman_fu_116_m_axi_uart_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_process_debug_comman_fu_116_m_axi_uart_RREADY : STD_LOGIC;
    signal grp_process_debug_comman_fu_116_m_axi_uart_BREADY : STD_LOGIC;
    signal grp_process_debug_comman_fu_116_ir : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_debug_comman_fu_116_ir_ap_vld : STD_LOGIC;
    signal grp_process_debug_comman_fu_116_halted_o : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_process_debug_comman_fu_116_halted_o_ap_vld : STD_LOGIC;
    signal grp_process_debug_comman_fu_116_pc_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_debug_comman_fu_116_pc_o_ap_vld : STD_LOGIC;
    signal grp_has_byte_fu_149_ap_start : STD_LOGIC;
    signal grp_has_byte_fu_149_ap_idle : STD_LOGIC;
    signal grp_has_byte_fu_149_m_axi_uart_AWVALID : STD_LOGIC;
    signal grp_has_byte_fu_149_m_axi_uart_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_has_byte_fu_149_m_axi_uart_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_has_byte_fu_149_m_axi_uart_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_has_byte_fu_149_m_axi_uart_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_has_byte_fu_149_m_axi_uart_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_has_byte_fu_149_m_axi_uart_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_has_byte_fu_149_m_axi_uart_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_has_byte_fu_149_m_axi_uart_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_has_byte_fu_149_m_axi_uart_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_has_byte_fu_149_m_axi_uart_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_has_byte_fu_149_m_axi_uart_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_has_byte_fu_149_m_axi_uart_WVALID : STD_LOGIC;
    signal grp_has_byte_fu_149_m_axi_uart_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_has_byte_fu_149_m_axi_uart_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_has_byte_fu_149_m_axi_uart_WLAST : STD_LOGIC;
    signal grp_has_byte_fu_149_m_axi_uart_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_has_byte_fu_149_m_axi_uart_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_has_byte_fu_149_m_axi_uart_ARVALID : STD_LOGIC;
    signal grp_has_byte_fu_149_m_axi_uart_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_has_byte_fu_149_m_axi_uart_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_has_byte_fu_149_m_axi_uart_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_has_byte_fu_149_m_axi_uart_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_has_byte_fu_149_m_axi_uart_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_has_byte_fu_149_m_axi_uart_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_has_byte_fu_149_m_axi_uart_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_has_byte_fu_149_m_axi_uart_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_has_byte_fu_149_m_axi_uart_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_has_byte_fu_149_m_axi_uart_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_has_byte_fu_149_m_axi_uart_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_has_byte_fu_149_m_axi_uart_RREADY : STD_LOGIC;
    signal grp_has_byte_fu_149_m_axi_uart_BREADY : STD_LOGIC;
    signal grp_process_debug_comman_fu_116_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_has_byte_fu_149_ap_start_reg : STD_LOGIC := '0';
    signal add_ln382_fu_188_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state8_on_subcall_done : BOOLEAN;

    component process_debug_comman IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_uart_AWVALID : OUT STD_LOGIC;
        m_axi_uart_AWREADY : IN STD_LOGIC;
        m_axi_uart_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_uart_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_uart_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_uart_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_uart_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_uart_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_uart_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_uart_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_uart_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_uart_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_uart_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_uart_WVALID : OUT STD_LOGIC;
        m_axi_uart_WREADY : IN STD_LOGIC;
        m_axi_uart_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_uart_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_uart_WLAST : OUT STD_LOGIC;
        m_axi_uart_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_uart_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_uart_ARVALID : OUT STD_LOGIC;
        m_axi_uart_ARREADY : IN STD_LOGIC;
        m_axi_uart_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_uart_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_uart_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_uart_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_uart_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_uart_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_uart_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_uart_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_uart_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_uart_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_uart_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_uart_RVALID : IN STD_LOGIC;
        m_axi_uart_RREADY : OUT STD_LOGIC;
        m_axi_uart_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_uart_RLAST : IN STD_LOGIC;
        m_axi_uart_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_uart_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_uart_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_uart_BVALID : IN STD_LOGIC;
        m_axi_uart_BREADY : OUT STD_LOGIC;
        m_axi_uart_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_uart_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_uart_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        uart_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        ir : OUT STD_LOGIC_VECTOR (31 downto 0);
        ir_ap_vld : OUT STD_LOGIC;
        cmd_count : IN STD_LOGIC_VECTOR (31 downto 0);
        halted_i : IN STD_LOGIC_VECTOR (0 downto 0);
        halted_o : OUT STD_LOGIC_VECTOR (0 downto 0);
        halted_o_ap_vld : OUT STD_LOGIC;
        pc_i : IN STD_LOGIC_VECTOR (31 downto 0);
        pc_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        pc_o_ap_vld : OUT STD_LOGIC );
    end component;


    component has_byte IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_uart_AWVALID : OUT STD_LOGIC;
        m_axi_uart_AWREADY : IN STD_LOGIC;
        m_axi_uart_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_uart_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_uart_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_uart_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_uart_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_uart_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_uart_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_uart_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_uart_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_uart_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_uart_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_uart_WVALID : OUT STD_LOGIC;
        m_axi_uart_WREADY : IN STD_LOGIC;
        m_axi_uart_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_uart_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_uart_WLAST : OUT STD_LOGIC;
        m_axi_uart_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_uart_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_uart_ARVALID : OUT STD_LOGIC;
        m_axi_uart_ARREADY : IN STD_LOGIC;
        m_axi_uart_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_uart_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_uart_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_uart_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_uart_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_uart_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_uart_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_uart_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_uart_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_uart_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_uart_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_uart_RVALID : IN STD_LOGIC;
        m_axi_uart_RREADY : OUT STD_LOGIC;
        m_axi_uart_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_uart_RLAST : IN STD_LOGIC;
        m_axi_uart_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_uart_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_uart_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_uart_BVALID : IN STD_LOGIC;
        m_axi_uart_BREADY : OUT STD_LOGIC;
        m_axi_uart_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_uart_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_uart_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        uart_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component uart_master_mem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    uart_master_mem_m_axi_U : component uart_master_mem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_MEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_MEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_mem_AWVALID,
        AWREADY => m_axi_mem_AWREADY,
        AWADDR => m_axi_mem_AWADDR,
        AWID => m_axi_mem_AWID,
        AWLEN => m_axi_mem_AWLEN,
        AWSIZE => m_axi_mem_AWSIZE,
        AWBURST => m_axi_mem_AWBURST,
        AWLOCK => m_axi_mem_AWLOCK,
        AWCACHE => m_axi_mem_AWCACHE,
        AWPROT => m_axi_mem_AWPROT,
        AWQOS => m_axi_mem_AWQOS,
        AWREGION => m_axi_mem_AWREGION,
        AWUSER => m_axi_mem_AWUSER,
        WVALID => m_axi_mem_WVALID,
        WREADY => m_axi_mem_WREADY,
        WDATA => m_axi_mem_WDATA,
        WSTRB => m_axi_mem_WSTRB,
        WLAST => m_axi_mem_WLAST,
        WID => m_axi_mem_WID,
        WUSER => m_axi_mem_WUSER,
        ARVALID => m_axi_mem_ARVALID,
        ARREADY => m_axi_mem_ARREADY,
        ARADDR => m_axi_mem_ARADDR,
        ARID => m_axi_mem_ARID,
        ARLEN => m_axi_mem_ARLEN,
        ARSIZE => m_axi_mem_ARSIZE,
        ARBURST => m_axi_mem_ARBURST,
        ARLOCK => m_axi_mem_ARLOCK,
        ARCACHE => m_axi_mem_ARCACHE,
        ARPROT => m_axi_mem_ARPROT,
        ARQOS => m_axi_mem_ARQOS,
        ARREGION => m_axi_mem_ARREGION,
        ARUSER => m_axi_mem_ARUSER,
        RVALID => m_axi_mem_RVALID,
        RREADY => m_axi_mem_RREADY,
        RDATA => m_axi_mem_RDATA,
        RLAST => m_axi_mem_RLAST,
        RID => m_axi_mem_RID,
        RUSER => m_axi_mem_RUSER,
        RRESP => m_axi_mem_RRESP,
        BVALID => m_axi_mem_BVALID,
        BREADY => m_axi_mem_BREADY,
        BRESP => m_axi_mem_BRESP,
        BID => m_axi_mem_BID,
        BUSER => m_axi_mem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => mem_ARVALID,
        I_ARREADY => mem_ARREADY,
        I_ARADDR => mem_ARADDR,
        I_ARID => mem_ARID,
        I_ARLEN => mem_ARLEN,
        I_ARSIZE => mem_ARSIZE,
        I_ARLOCK => mem_ARLOCK,
        I_ARCACHE => mem_ARCACHE,
        I_ARQOS => mem_ARQOS,
        I_ARPROT => mem_ARPROT,
        I_ARUSER => mem_ARUSER,
        I_ARBURST => mem_ARBURST,
        I_ARREGION => mem_ARREGION,
        I_RVALID => mem_RVALID,
        I_RREADY => mem_RREADY,
        I_RDATA => mem_RDATA,
        I_RID => mem_RID,
        I_RUSER => mem_RUSER,
        I_RRESP => mem_RRESP,
        I_RLAST => mem_RLAST,
        I_AWVALID => mem_AWVALID,
        I_AWREADY => mem_AWREADY,
        I_AWADDR => grp_process_debug_comman_fu_116_m_axi_uart_AWADDR,
        I_AWID => grp_process_debug_comman_fu_116_m_axi_uart_AWID,
        I_AWLEN => grp_process_debug_comman_fu_116_m_axi_uart_AWLEN,
        I_AWSIZE => grp_process_debug_comman_fu_116_m_axi_uart_AWSIZE,
        I_AWLOCK => grp_process_debug_comman_fu_116_m_axi_uart_AWLOCK,
        I_AWCACHE => grp_process_debug_comman_fu_116_m_axi_uart_AWCACHE,
        I_AWQOS => grp_process_debug_comman_fu_116_m_axi_uart_AWQOS,
        I_AWPROT => grp_process_debug_comman_fu_116_m_axi_uart_AWPROT,
        I_AWUSER => grp_process_debug_comman_fu_116_m_axi_uart_AWUSER,
        I_AWBURST => grp_process_debug_comman_fu_116_m_axi_uart_AWBURST,
        I_AWREGION => grp_process_debug_comman_fu_116_m_axi_uart_AWREGION,
        I_WVALID => mem_WVALID,
        I_WREADY => mem_WREADY,
        I_WDATA => grp_process_debug_comman_fu_116_m_axi_uart_WDATA,
        I_WID => grp_process_debug_comman_fu_116_m_axi_uart_WID,
        I_WUSER => grp_process_debug_comman_fu_116_m_axi_uart_WUSER,
        I_WLAST => grp_process_debug_comman_fu_116_m_axi_uart_WLAST,
        I_WSTRB => grp_process_debug_comman_fu_116_m_axi_uart_WSTRB,
        I_BVALID => mem_BVALID,
        I_BREADY => mem_BREADY,
        I_BRESP => mem_BRESP,
        I_BID => mem_BID,
        I_BUSER => mem_BUSER);

    grp_process_debug_comman_fu_116 : component process_debug_comman
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_process_debug_comman_fu_116_ap_start,
        ap_done => grp_process_debug_comman_fu_116_ap_done,
        ap_idle => grp_process_debug_comman_fu_116_ap_idle,
        ap_ready => grp_process_debug_comman_fu_116_ap_ready,
        m_axi_uart_AWVALID => grp_process_debug_comman_fu_116_m_axi_uart_AWVALID,
        m_axi_uart_AWREADY => mem_AWREADY,
        m_axi_uart_AWADDR => grp_process_debug_comman_fu_116_m_axi_uart_AWADDR,
        m_axi_uart_AWID => grp_process_debug_comman_fu_116_m_axi_uart_AWID,
        m_axi_uart_AWLEN => grp_process_debug_comman_fu_116_m_axi_uart_AWLEN,
        m_axi_uart_AWSIZE => grp_process_debug_comman_fu_116_m_axi_uart_AWSIZE,
        m_axi_uart_AWBURST => grp_process_debug_comman_fu_116_m_axi_uart_AWBURST,
        m_axi_uart_AWLOCK => grp_process_debug_comman_fu_116_m_axi_uart_AWLOCK,
        m_axi_uart_AWCACHE => grp_process_debug_comman_fu_116_m_axi_uart_AWCACHE,
        m_axi_uart_AWPROT => grp_process_debug_comman_fu_116_m_axi_uart_AWPROT,
        m_axi_uart_AWQOS => grp_process_debug_comman_fu_116_m_axi_uart_AWQOS,
        m_axi_uart_AWREGION => grp_process_debug_comman_fu_116_m_axi_uart_AWREGION,
        m_axi_uart_AWUSER => grp_process_debug_comman_fu_116_m_axi_uart_AWUSER,
        m_axi_uart_WVALID => grp_process_debug_comman_fu_116_m_axi_uart_WVALID,
        m_axi_uart_WREADY => mem_WREADY,
        m_axi_uart_WDATA => grp_process_debug_comman_fu_116_m_axi_uart_WDATA,
        m_axi_uart_WSTRB => grp_process_debug_comman_fu_116_m_axi_uart_WSTRB,
        m_axi_uart_WLAST => grp_process_debug_comman_fu_116_m_axi_uart_WLAST,
        m_axi_uart_WID => grp_process_debug_comman_fu_116_m_axi_uart_WID,
        m_axi_uart_WUSER => grp_process_debug_comman_fu_116_m_axi_uart_WUSER,
        m_axi_uart_ARVALID => grp_process_debug_comman_fu_116_m_axi_uart_ARVALID,
        m_axi_uart_ARREADY => mem_ARREADY,
        m_axi_uart_ARADDR => grp_process_debug_comman_fu_116_m_axi_uart_ARADDR,
        m_axi_uart_ARID => grp_process_debug_comman_fu_116_m_axi_uart_ARID,
        m_axi_uart_ARLEN => grp_process_debug_comman_fu_116_m_axi_uart_ARLEN,
        m_axi_uart_ARSIZE => grp_process_debug_comman_fu_116_m_axi_uart_ARSIZE,
        m_axi_uart_ARBURST => grp_process_debug_comman_fu_116_m_axi_uart_ARBURST,
        m_axi_uart_ARLOCK => grp_process_debug_comman_fu_116_m_axi_uart_ARLOCK,
        m_axi_uart_ARCACHE => grp_process_debug_comman_fu_116_m_axi_uart_ARCACHE,
        m_axi_uart_ARPROT => grp_process_debug_comman_fu_116_m_axi_uart_ARPROT,
        m_axi_uart_ARQOS => grp_process_debug_comman_fu_116_m_axi_uart_ARQOS,
        m_axi_uart_ARREGION => grp_process_debug_comman_fu_116_m_axi_uart_ARREGION,
        m_axi_uart_ARUSER => grp_process_debug_comman_fu_116_m_axi_uart_ARUSER,
        m_axi_uart_RVALID => mem_RVALID,
        m_axi_uart_RREADY => grp_process_debug_comman_fu_116_m_axi_uart_RREADY,
        m_axi_uart_RDATA => mem_RDATA,
        m_axi_uart_RLAST => mem_RLAST,
        m_axi_uart_RID => mem_RID,
        m_axi_uart_RUSER => mem_RUSER,
        m_axi_uart_RRESP => mem_RRESP,
        m_axi_uart_BVALID => mem_BVALID,
        m_axi_uart_BREADY => grp_process_debug_comman_fu_116_m_axi_uart_BREADY,
        m_axi_uart_BRESP => mem_BRESP,
        m_axi_uart_BID => mem_BID,
        m_axi_uart_BUSER => mem_BUSER,
        uart_offset => iomap1_reg_212,
        ir => grp_process_debug_comman_fu_116_ir,
        ir_ap_vld => grp_process_debug_comman_fu_116_ir_ap_vld,
        cmd_count => cmd_count,
        halted_i => halted,
        halted_o => grp_process_debug_comman_fu_116_halted_o,
        halted_o_ap_vld => grp_process_debug_comman_fu_116_halted_o_ap_vld,
        pc_i => pc,
        pc_o => grp_process_debug_comman_fu_116_pc_o,
        pc_o_ap_vld => grp_process_debug_comman_fu_116_pc_o_ap_vld);

    grp_has_byte_fu_149 : component has_byte
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_has_byte_fu_149_ap_start,
        ap_done => grp_has_byte_fu_149_ap_done,
        ap_idle => grp_has_byte_fu_149_ap_idle,
        ap_ready => grp_has_byte_fu_149_ap_ready,
        m_axi_uart_AWVALID => grp_has_byte_fu_149_m_axi_uart_AWVALID,
        m_axi_uart_AWREADY => ap_const_logic_0,
        m_axi_uart_AWADDR => grp_has_byte_fu_149_m_axi_uart_AWADDR,
        m_axi_uart_AWID => grp_has_byte_fu_149_m_axi_uart_AWID,
        m_axi_uart_AWLEN => grp_has_byte_fu_149_m_axi_uart_AWLEN,
        m_axi_uart_AWSIZE => grp_has_byte_fu_149_m_axi_uart_AWSIZE,
        m_axi_uart_AWBURST => grp_has_byte_fu_149_m_axi_uart_AWBURST,
        m_axi_uart_AWLOCK => grp_has_byte_fu_149_m_axi_uart_AWLOCK,
        m_axi_uart_AWCACHE => grp_has_byte_fu_149_m_axi_uart_AWCACHE,
        m_axi_uart_AWPROT => grp_has_byte_fu_149_m_axi_uart_AWPROT,
        m_axi_uart_AWQOS => grp_has_byte_fu_149_m_axi_uart_AWQOS,
        m_axi_uart_AWREGION => grp_has_byte_fu_149_m_axi_uart_AWREGION,
        m_axi_uart_AWUSER => grp_has_byte_fu_149_m_axi_uart_AWUSER,
        m_axi_uart_WVALID => grp_has_byte_fu_149_m_axi_uart_WVALID,
        m_axi_uart_WREADY => ap_const_logic_0,
        m_axi_uart_WDATA => grp_has_byte_fu_149_m_axi_uart_WDATA,
        m_axi_uart_WSTRB => grp_has_byte_fu_149_m_axi_uart_WSTRB,
        m_axi_uart_WLAST => grp_has_byte_fu_149_m_axi_uart_WLAST,
        m_axi_uart_WID => grp_has_byte_fu_149_m_axi_uart_WID,
        m_axi_uart_WUSER => grp_has_byte_fu_149_m_axi_uart_WUSER,
        m_axi_uart_ARVALID => grp_has_byte_fu_149_m_axi_uart_ARVALID,
        m_axi_uart_ARREADY => mem_ARREADY,
        m_axi_uart_ARADDR => grp_has_byte_fu_149_m_axi_uart_ARADDR,
        m_axi_uart_ARID => grp_has_byte_fu_149_m_axi_uart_ARID,
        m_axi_uart_ARLEN => grp_has_byte_fu_149_m_axi_uart_ARLEN,
        m_axi_uart_ARSIZE => grp_has_byte_fu_149_m_axi_uart_ARSIZE,
        m_axi_uart_ARBURST => grp_has_byte_fu_149_m_axi_uart_ARBURST,
        m_axi_uart_ARLOCK => grp_has_byte_fu_149_m_axi_uart_ARLOCK,
        m_axi_uart_ARCACHE => grp_has_byte_fu_149_m_axi_uart_ARCACHE,
        m_axi_uart_ARPROT => grp_has_byte_fu_149_m_axi_uart_ARPROT,
        m_axi_uart_ARQOS => grp_has_byte_fu_149_m_axi_uart_ARQOS,
        m_axi_uart_ARREGION => grp_has_byte_fu_149_m_axi_uart_ARREGION,
        m_axi_uart_ARUSER => grp_has_byte_fu_149_m_axi_uart_ARUSER,
        m_axi_uart_RVALID => mem_RVALID,
        m_axi_uart_RREADY => grp_has_byte_fu_149_m_axi_uart_RREADY,
        m_axi_uart_RDATA => mem_RDATA,
        m_axi_uart_RLAST => mem_RLAST,
        m_axi_uart_RID => mem_RID,
        m_axi_uart_RUSER => mem_RUSER,
        m_axi_uart_RRESP => mem_RRESP,
        m_axi_uart_BVALID => ap_const_logic_0,
        m_axi_uart_BREADY => grp_has_byte_fu_149_m_axi_uart_BREADY,
        m_axi_uart_BRESP => ap_const_lv2_0,
        m_axi_uart_BID => ap_const_lv1_0,
        m_axi_uart_BUSER => ap_const_lv1_0,
        uart_offset => iomap1_reg_212,
        ap_return => grp_has_byte_fu_149_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_has_byte_fu_149_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_has_byte_fu_149_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_has_byte_fu_149_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_has_byte_fu_149_ap_ready = ap_const_logic_1)) then 
                    grp_has_byte_fu_149_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_process_debug_comman_fu_116_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_process_debug_comman_fu_116_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_process_debug_comman_fu_116_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_process_debug_comman_fu_116_ap_ready = ap_const_logic_1)) then 
                    grp_process_debug_comman_fu_116_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    dbg_ir_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    dbg_pc_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    halted_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                halted <= ap_const_lv1_1;
            elsif (((tmp_reg_227 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8) and (grp_process_debug_comman_fu_116_halted_o_ap_vld = ap_const_logic_1))) then 
                halted <= grp_process_debug_comman_fu_116_halted_o;
            end if; 
        end if;
    end process;

    pc_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                pc <= ap_const_lv32_0;
            elsif (((tmp_reg_227 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8) and (grp_process_debug_comman_fu_116_pc_o_ap_vld = ap_const_logic_1))) then 
                pc <= grp_process_debug_comman_fu_116_pc_o;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_has_byte_fu_149_ap_done = ap_const_logic_1) and (grp_has_byte_fu_149_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                cmd_count <= add_ln382_fu_188_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((dbg_ir_1_vld_reg = ap_const_logic_0) and (dbg_ir_1_vld_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_const_logic_1) and (dbg_ir_1_vld_in = ap_const_logic_1) and (dbg_ir_1_vld_reg = ap_const_logic_1)))) then
                dbg_ir_1_data_reg <= dbg_ir_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((dbg_pc_1_vld_reg = ap_const_logic_0) and (dbg_pc_1_vld_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_const_logic_1) and (dbg_pc_1_vld_in = ap_const_logic_1) and (dbg_pc_1_vld_reg = ap_const_logic_1)))) then
                dbg_pc_1_data_reg <= dbg_pc_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                iomap1_reg_212 <= iomap(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_has_byte_fu_149_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_reg_227 <= grp_has_byte_fu_149_ap_return;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, grp_has_byte_fu_149_ap_return, ap_CS_fsm_state5, grp_has_byte_fu_149_ap_done, ap_CS_fsm_state8, ap_block_state8_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((grp_has_byte_fu_149_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (grp_has_byte_fu_149_ap_return = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif (((grp_has_byte_fu_149_ap_done = ap_const_logic_1) and (grp_has_byte_fu_149_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_boolean_0 = ap_block_state8_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln382_fu_188_p2 <= std_logic_vector(unsigned(cmd_count) + unsigned(ap_const_lv32_10000));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state8_on_subcall_done_assign_proc : process(tmp_reg_227, grp_process_debug_comman_fu_116_ap_done)
    begin
                ap_block_state8_on_subcall_done <= ((grp_process_debug_comman_fu_116_ap_done = ap_const_logic_0) and (tmp_reg_227 = ap_const_lv1_1));
    end process;

    ap_return <= ap_const_lv32_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    dbg_ir <= dbg_ir_1_data_reg;

    dbg_ir_1_data_in_assign_proc : process(cmd_count, ap_CS_fsm_state1, step_read_read_fu_109_p2, ap_CS_fsm_state3, grp_has_byte_fu_149_ap_return, tmp_reg_227, ap_CS_fsm_state5, grp_has_byte_fu_149_ap_done, or_ln383_fu_200_p2, grp_process_debug_comman_fu_116_ir, grp_process_debug_comman_fu_116_ir_ap_vld, ap_CS_fsm_state8)
    begin
        if (((grp_has_byte_fu_149_ap_done = ap_const_logic_1) and (grp_has_byte_fu_149_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            dbg_ir_1_data_in <= or_ln383_fu_200_p2;
        elsif (((step_read_read_fu_109_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dbg_ir_1_data_in <= ap_const_lv32_ABBADEDE;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            dbg_ir_1_data_in <= cmd_count;
        elsif (((tmp_reg_227 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8) and (grp_process_debug_comman_fu_116_ir_ap_vld = ap_const_logic_1))) then 
            dbg_ir_1_data_in <= grp_process_debug_comman_fu_116_ir;
        else 
            dbg_ir_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dbg_ir_1_vld_in_assign_proc : process(ap_CS_fsm_state1, step_read_read_fu_109_p2, ap_CS_fsm_state3, grp_has_byte_fu_149_ap_return, tmp_reg_227, ap_CS_fsm_state5, grp_has_byte_fu_149_ap_done, grp_process_debug_comman_fu_116_ir_ap_vld, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or ((grp_has_byte_fu_149_ap_done = ap_const_logic_1) and (grp_has_byte_fu_149_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((step_read_read_fu_109_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            dbg_ir_1_vld_in <= ap_const_logic_1;
        elsif (((tmp_reg_227 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            dbg_ir_1_vld_in <= grp_process_debug_comman_fu_116_ir_ap_vld;
        else 
            dbg_ir_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dbg_pc <= dbg_pc_1_data_reg;

    dbg_pc_1_data_in_assign_proc : process(pc, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dbg_pc_1_data_in <= pc;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            dbg_pc_1_data_in <= ap_const_lv32_0;
        else 
            dbg_pc_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dbg_pc_1_vld_in_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dbg_pc_1_vld_in <= ap_const_logic_1;
        else 
            dbg_pc_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    grp_has_byte_fu_149_ap_start <= grp_has_byte_fu_149_ap_start_reg;
    grp_process_debug_comman_fu_116_ap_start <= grp_process_debug_comman_fu_116_ap_start_reg;

    mem_ARADDR_assign_proc : process(ap_CS_fsm_state4, tmp_reg_227, ap_CS_fsm_state5, grp_process_debug_comman_fu_116_m_axi_uart_ARADDR, grp_has_byte_fu_149_m_axi_uart_ARADDR, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            mem_ARADDR <= grp_has_byte_fu_149_m_axi_uart_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or ((tmp_reg_227 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            mem_ARADDR <= grp_process_debug_comman_fu_116_m_axi_uart_ARADDR;
        else 
            mem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mem_ARBURST_assign_proc : process(ap_CS_fsm_state4, tmp_reg_227, ap_CS_fsm_state5, grp_process_debug_comman_fu_116_m_axi_uart_ARBURST, grp_has_byte_fu_149_m_axi_uart_ARBURST, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            mem_ARBURST <= grp_has_byte_fu_149_m_axi_uart_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or ((tmp_reg_227 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            mem_ARBURST <= grp_process_debug_comman_fu_116_m_axi_uart_ARBURST;
        else 
            mem_ARBURST <= "XX";
        end if; 
    end process;


    mem_ARCACHE_assign_proc : process(ap_CS_fsm_state4, tmp_reg_227, ap_CS_fsm_state5, grp_process_debug_comman_fu_116_m_axi_uart_ARCACHE, grp_has_byte_fu_149_m_axi_uart_ARCACHE, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            mem_ARCACHE <= grp_has_byte_fu_149_m_axi_uart_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or ((tmp_reg_227 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            mem_ARCACHE <= grp_process_debug_comman_fu_116_m_axi_uart_ARCACHE;
        else 
            mem_ARCACHE <= "XXXX";
        end if; 
    end process;


    mem_ARID_assign_proc : process(ap_CS_fsm_state4, tmp_reg_227, ap_CS_fsm_state5, grp_process_debug_comman_fu_116_m_axi_uart_ARID, grp_has_byte_fu_149_m_axi_uart_ARID, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            mem_ARID <= grp_has_byte_fu_149_m_axi_uart_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or ((tmp_reg_227 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            mem_ARID <= grp_process_debug_comman_fu_116_m_axi_uart_ARID;
        else 
            mem_ARID <= "X";
        end if; 
    end process;


    mem_ARLEN_assign_proc : process(ap_CS_fsm_state4, tmp_reg_227, ap_CS_fsm_state5, grp_process_debug_comman_fu_116_m_axi_uart_ARLEN, grp_has_byte_fu_149_m_axi_uart_ARLEN, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            mem_ARLEN <= grp_has_byte_fu_149_m_axi_uart_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or ((tmp_reg_227 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            mem_ARLEN <= grp_process_debug_comman_fu_116_m_axi_uart_ARLEN;
        else 
            mem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mem_ARLOCK_assign_proc : process(ap_CS_fsm_state4, tmp_reg_227, ap_CS_fsm_state5, grp_process_debug_comman_fu_116_m_axi_uart_ARLOCK, grp_has_byte_fu_149_m_axi_uart_ARLOCK, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            mem_ARLOCK <= grp_has_byte_fu_149_m_axi_uart_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or ((tmp_reg_227 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            mem_ARLOCK <= grp_process_debug_comman_fu_116_m_axi_uart_ARLOCK;
        else 
            mem_ARLOCK <= "XX";
        end if; 
    end process;


    mem_ARPROT_assign_proc : process(ap_CS_fsm_state4, tmp_reg_227, ap_CS_fsm_state5, grp_process_debug_comman_fu_116_m_axi_uart_ARPROT, grp_has_byte_fu_149_m_axi_uart_ARPROT, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            mem_ARPROT <= grp_has_byte_fu_149_m_axi_uart_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or ((tmp_reg_227 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            mem_ARPROT <= grp_process_debug_comman_fu_116_m_axi_uart_ARPROT;
        else 
            mem_ARPROT <= "XXX";
        end if; 
    end process;


    mem_ARQOS_assign_proc : process(ap_CS_fsm_state4, tmp_reg_227, ap_CS_fsm_state5, grp_process_debug_comman_fu_116_m_axi_uart_ARQOS, grp_has_byte_fu_149_m_axi_uart_ARQOS, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            mem_ARQOS <= grp_has_byte_fu_149_m_axi_uart_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or ((tmp_reg_227 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            mem_ARQOS <= grp_process_debug_comman_fu_116_m_axi_uart_ARQOS;
        else 
            mem_ARQOS <= "XXXX";
        end if; 
    end process;


    mem_ARREGION_assign_proc : process(ap_CS_fsm_state4, tmp_reg_227, ap_CS_fsm_state5, grp_process_debug_comman_fu_116_m_axi_uart_ARREGION, grp_has_byte_fu_149_m_axi_uart_ARREGION, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            mem_ARREGION <= grp_has_byte_fu_149_m_axi_uart_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or ((tmp_reg_227 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            mem_ARREGION <= grp_process_debug_comman_fu_116_m_axi_uart_ARREGION;
        else 
            mem_ARREGION <= "XXXX";
        end if; 
    end process;


    mem_ARSIZE_assign_proc : process(ap_CS_fsm_state4, tmp_reg_227, ap_CS_fsm_state5, grp_process_debug_comman_fu_116_m_axi_uart_ARSIZE, grp_has_byte_fu_149_m_axi_uart_ARSIZE, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            mem_ARSIZE <= grp_has_byte_fu_149_m_axi_uart_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or ((tmp_reg_227 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            mem_ARSIZE <= grp_process_debug_comman_fu_116_m_axi_uart_ARSIZE;
        else 
            mem_ARSIZE <= "XXX";
        end if; 
    end process;


    mem_ARUSER_assign_proc : process(ap_CS_fsm_state4, tmp_reg_227, ap_CS_fsm_state5, grp_process_debug_comman_fu_116_m_axi_uart_ARUSER, grp_has_byte_fu_149_m_axi_uart_ARUSER, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            mem_ARUSER <= grp_has_byte_fu_149_m_axi_uart_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or ((tmp_reg_227 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            mem_ARUSER <= grp_process_debug_comman_fu_116_m_axi_uart_ARUSER;
        else 
            mem_ARUSER <= "X";
        end if; 
    end process;


    mem_ARVALID_assign_proc : process(ap_CS_fsm_state4, tmp_reg_227, ap_CS_fsm_state5, grp_process_debug_comman_fu_116_m_axi_uart_ARVALID, grp_has_byte_fu_149_m_axi_uart_ARVALID, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            mem_ARVALID <= grp_has_byte_fu_149_m_axi_uart_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or ((tmp_reg_227 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            mem_ARVALID <= grp_process_debug_comman_fu_116_m_axi_uart_ARVALID;
        else 
            mem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_AWVALID_assign_proc : process(tmp_reg_227, grp_process_debug_comman_fu_116_m_axi_uart_AWVALID, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((tmp_reg_227 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            mem_AWVALID <= grp_process_debug_comman_fu_116_m_axi_uart_AWVALID;
        else 
            mem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_BREADY_assign_proc : process(tmp_reg_227, grp_process_debug_comman_fu_116_m_axi_uart_BREADY, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((tmp_reg_227 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            mem_BREADY <= grp_process_debug_comman_fu_116_m_axi_uart_BREADY;
        else 
            mem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    mem_RREADY_assign_proc : process(ap_CS_fsm_state4, tmp_reg_227, ap_CS_fsm_state5, grp_process_debug_comman_fu_116_m_axi_uart_RREADY, grp_has_byte_fu_149_m_axi_uart_RREADY, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            mem_RREADY <= grp_has_byte_fu_149_m_axi_uart_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or ((tmp_reg_227 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            mem_RREADY <= grp_process_debug_comman_fu_116_m_axi_uart_RREADY;
        else 
            mem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    mem_WVALID_assign_proc : process(tmp_reg_227, grp_process_debug_comman_fu_116_m_axi_uart_WVALID, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((tmp_reg_227 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            mem_WVALID <= grp_process_debug_comman_fu_116_m_axi_uart_WVALID;
        else 
            mem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    or_ln383_fu_200_p2 <= (ap_const_lv32_BEEF or add_ln382_fu_188_p2);
    step_read_read_fu_109_p2 <= (0=>step, others=>'-');
end behav;
